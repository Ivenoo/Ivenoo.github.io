{"version":3,"sources":["components/TransactionList.js","components/TransactionForm.js","components/Valute.js","components/FormRules.js","components/App.js","serviceWorker.js","index.js"],"names":["TransactionList","props","sumTrans","parseFloat","maxTrans","maxTransName","className","listTrans","map","event","index","costTrans","name","length","toFixed","actualyValute","plnCost","key","onClick","delOneTrans","delAllTrans","TransactionForm","onSubmit","addTrans","bind","this","id","maxLength","type","placeholder","onKeyDown","evt","includes","preventDefault","value","Valute","defValute","changeValute","FormRules","App","e","currentTarget","Form_Name","Form_Cost","validationName","document","querySelector","validationCost","formNameInput","formCostInput","charAt","style","display","console","log","obj","state","push","setState","splice","newValuteValue","validation","valuteValueInput","valute","axios","get","then","res","data","rates","mid","catch","src","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b3254dc.chunk.js","sourcesContent":["import React from 'react';\nimport './style/TransactionList.css';\n\nfunction TransactionList(props) {\n  let sumTrans = 0;\n  sumTrans = parseFloat(sumTrans);\n  let maxTrans = 0;\n  maxTrans = parseFloat(maxTrans);\n  let maxTransName = \"BRAK TRANSAKCJI\";\n  return (\n    <div className=\"TransactionList\">\n      <span> NAJWYŻSZA AKTUALNA TRANSAKCJA:</span><br/>\n      <div className=\"highestTrans\">\n      {props.listTrans.map((event,index) =>{\n        if(event.costTrans > maxTrans){\n          maxTrans = event.costTrans\n          maxTransName= event.name\n        }\n        return(null)\n      })} \n     { (props.listTrans.length >0) ?\n           <table className=\"TableOneItem\">\n           <tbody>\n             <tr>\n               <th className=\"TableOneItem__Title highestTrans_NameTitle\">NAZWA</th>\n               <th className=\"TableOneItem__Title highestTrans_EURTitle\"> KWOTA EUR</th>\n               <th className=\"TableOneItem__Title highestTrans_PLNTitle\"> KWOTA PLN</th>\n             </tr>\n             <tr>\n               <td className=\"TableOneItem__Value highestTrans_Name\">{maxTransName}</td>\n               <td className=\"TableOneItem__Value highestTrans_EUR\"> {parseFloat(maxTrans).toFixed(2)}</td>\n               <td className=\"TableOneItem__Value highestTrans_PLN\"> {(parseFloat(maxTrans)*props.actualyValute).toFixed(2)}</td>\n             </tr>\n           </tbody>\n         </table>:\n         <span> BRAK TRANSAKCJI</span>\n     }\n      </div>   \n      <span>LISTA TRANSAKCJI:</span>  \n      <div className=\"TransactionList_ValueBox\">  \n        <table className=\"TableOneItem\">\n          <tbody>\n              <tr className=\"TableOneItem__AllTitle\">\n                <th className=\"TableOneItem__Title TableOneItem__TitleName\">NAZWA</th>\n                <th className=\"TableOneItem__Title TableOneItem__TitleCost\">KWOTA EUR</th>\n                <th className=\"TableOneItem__Title TableOneItem__TitleCost\">KWOTA PLN</th>\n                <th className=\"TableOneItem__Title TableOneItem__TitleDel\"> USUŃ </th>\n              </tr>\n            {props.listTrans.map((event,index) =>{\n              sumTrans = sumTrans + parseFloat(event.costTrans)\n              let plnCost = parseFloat(event.costTrans)*props.actualyValute;\n              plnCost = plnCost.toFixed(2)\n              event.costTrans= parseFloat(event.costTrans).toFixed(2)\n              return(\n                <tr key={index}>\n                <td className=\"TableOneItem__Value TableOneItem__Name\">{event.name}</td>\n                <td className=\"TableOneItem__Value TableOneItem__CostEUR\"> {event.costTrans}</td>\n                <td className=\"TableOneItem__Value TableOneItem__CostPLN\">{plnCost}</td>\n                <td className=\"TableOneItem__Value\"><button className=\"TableOneItem__Delete\" onClick={()=>{props.delOneTrans(index)}}>USUŃ</button></td>\n                </tr>\n              )})}\n          </tbody>\n        </table>\n      </div>\n      <div className=\"Sum__Box\">\n      <span> SUMA TRANSAKCJI:</span>\n      <div className=\"Sum_TableBox\"> \n        <table className=\"Sum_Table\">\n          <tbody>\n            <tr>\n                <th className=\"TableOneItem__Title TitleSum__Title\">SUMA W EUR</th>\n                <th className=\"TableOneItem__Title TitleSum__Title\">SUMA W PLN</th>\n              </tr>     \n              <tr>\n                <td className=\"Sum__Trans\">{sumTrans.toFixed(2)}</td>\n                <td className=\"Sum__Trans\">{(sumTrans*props.actualyValute).toFixed(2)}</td>\n              </tr>\n          </tbody>\n        </table>\n        <button className=\"Button__DeleteAll\" onClick={props.delAllTrans}>USUŃ WSZYSTKO</button>\n      </div>\n     </div>\n    </div>\n  );\n}\n\nexport default TransactionList;\n","import React from 'react';\nimport './style/TransactionForm.css';\n\n\nfunction TransactionForm(props) {\n  return (\n    <div className=\"TransactionForm\">\n      <div className=\"TransactionForm__Body\">\n     <p className=\"TransactionForm__Title\">FORMULARZ DODAWANIA TRANSAKCJI:</p>\n     <form onSubmit={props.addTrans.bind(this)} className=\"TransactionForm__Form\">\n       <span className=\"TransactionForm__Spans\">NAZWA TRANSAKCJI</span>\n       <input id=\"Form_Name\" className=\"TransactionForm__Name TransactionForm__Inputs\" maxLength=\"25\" type=\"text\" placeholder=\"Nazwa transakcji...\"/>\n       <div>\n         <div className=\"TransactionForm__NameValidation\">\n          <span className=\"Validation TransactionForm__NameValidationSpan\">PODAJ NAZWĘ TRANSAKCJI !!</span>\n         </div>\n       </div>\n       <span className=\"TransactionForm__Spans\">KWOTA TRANSAKCJI</span>\n       <input id=\"Form_Cost\" className=\"TransactionForm__Cost TransactionForm__Inputs\" maxLength=\"10\" type=\"text\" placeholder=\"Kwota transakcji...\"  onKeyDown={(evt) =>![\"1\",\"2\",\"3\", \"4\", \"5\", \"6\",\"7\",\"8\",\"9\",\"0\",\".\",\"Backspace\"].includes(evt.key) && evt.preventDefault()}/>\n        <div className=\"TransactionForm__CostValidation\">\n          <span className=\" Validation TransactionForm__CostValidationSpan\">PODAJ KWOTE TRANSAKCJI !!</span>\n        </div>\n       <input className=\"TransactionForm__Button TransactionForm__Inputs\" type=\"submit\"  value=\"Dodaj transakcje\"/>\n     </form>\n     </div>\n    </div>\n  );\n}\n\nexport default TransactionForm;\n","import React from 'react';\nimport './style/Valute.css';\n\nfunction Valute(props) {\n  return (\n    <div className=\"Valute\">\n      <div className=\"Valute__Box\">\n      <p className=\"Valute__BankValute\"> AKTUALNY  KURS W NBP WYNOSI : 1 EUR =  {props.defValute} PLN</p>\n      <div className=\"Valute__ActualyValute\">\n      <span>1 EUR =</span>\n      <input id=\"ValuteValue\" placeholder=\"ilość PLN...\" maxLength=\"8\" onKeyDown={(evt) =>![\"1\",\"2\",\"3\", \"4\", \"5\", \"6\",\"7\",\"8\",\"9\",\"0\",\".\",\"Backspace\"].includes(evt.key) && evt.preventDefault()}/> \n      <span>PLN</span>\n      </div>\n      <div><span className=\"Valute__Validation Validation\"> PODAJ PRAWIDŁOWĄ WARTOSC WALUTY !!</span></div>\n      <span className=\"Valute_ActualyValuteValue\"> ( aktualnie: 1 EUR = {props.actualyValute} PLN)</span>\n      <div className=\"Valute__ButtonBox\">\n      <input type=\"button\" onClick={props.changeValute} className=\"Valute__ButtonChange\" value=\"zmień walute\"/> \n      </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default Valute;\n","import React from 'react';\nimport './style/FormRules.css';\n\n\nfunction FormRules(){\n  return(\n  <div className=\"Form__RulesBox\"> \n    <span className=\"Form__Rules\">Nazwa transakcji może zawierać maksymalnie 25 znaków ( w tym: 'spacje', '.' oraz ',' )</span>\n    <span className=\"Form__Rules\"> Kwota transakcji może zawierać maksymalnie 9 znaków ( w tym: '.' )</span>\n  </div>\n  )\n}\n\nexport default FormRules;\n","import React from 'react';\nimport './style/App.css';\nimport TransactionList from './TransactionList';\nimport TransactionForm from './TransactionForm';\nimport Valute from './Valute';\nimport FormRules from './FormRules'\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state ={\n      valute: 4.32,\n      defValute: 0,\n      listTrans: []\n    }\n}\n  componentDidMount(){\n    axios.get('http://api.nbp.pl/api/exchangerates/rates/A/EUR/').then(\n          (res)=>{\n            this.setState({\n              defValute: parseFloat(res.data.rates[0].mid),\n              valute: parseFloat(res.data.rates[0].mid)\n            })\n          }).catch(()=>{\n            console.log(\"Problem z pobaniem danych\");\n          })\n  }\n\n  addTrans = (e) => {\n      e.preventDefault() \n      const name = e.currentTarget.Form_Name.value;\n      const costTrans = e.currentTarget.Form_Cost.value;\n      const validationName = document.querySelector('.TransactionForm__NameValidationSpan');\n      const validationCost = document.querySelector('.TransactionForm__CostValidationSpan');\n      const formNameInput = document.querySelector('#Form_Name');\n      const formCostInput = document.querySelector('#Form_Cost');\n\n        if(name.length === 0 || name.charAt(0,1) === ' '){\n          if(costTrans.length !== 0 && costTrans !== '.' ){\n            validationCost.style.display='none';\n            formCostInput.style= \"border-color:var(--border-color)\";\n          }else{\n            validationCost.style.display='block';\n            formCostInput.style= \"border-color:var(--validation-color);\";\n          }\n          validationName.style.display='block';\n          formNameInput.style= \"border-color:var(--validation-color);\";\n        }else if(costTrans.length === 0 || costTrans === '.'){\n          if(name.length !== 0  && name.charAt(0,1) !== ' '){\n            console.log(name)\n            validationName.style.display='none';\n            formNameInput.style= \"border-color:var(--border-color)\";\n          }\n          validationCost.style.display='block';\n          formCostInput.style= \"border-color:var(--validation-color);\";\n        }else{\n          const obj ={\n            name,\n            costTrans\n          }\n          this.state.listTrans.push(obj)\n          this.setState({\n            listTrans: this.state.listTrans,\n          })\n          validationName.style.display='none';\n          formNameInput.value = \"\";\n          formNameInput.style= \"border-color:var(--border-color)\";\n          validationCost.style.display='none';\n          formCostInput.value = \"\";\n          formCostInput.style= \"border-color:var(--border-color)\";\n        }  \n\n  }\n\n  delOneTrans = (index) =>{\n    this.state.listTrans.splice(index, 1)\n    this.setState({\n      listTrans: this.state.listTrans\n    }) \n  }\n\n  delAllTrans = () =>{\n    this.setState({\n      listTrans: []\n    })\n  }\n\n  changeValute = () =>{\n    const newValuteValue = document.querySelector('#ValuteValue').value;\n    const validation = document.querySelector('.Valute__Validation');\n    const valuteValueInput  = document.querySelector('#ValuteValue');\n    if(newValuteValue > 0 && newValuteValue !== '.'){\n      this.setState({\n        valute: newValuteValue\n      })\n      validation.style.display='none';\n      valuteValueInput.style= \"border-color:var(--border-color)\";\n      valuteValueInput.value = \"\";\n    }else{\n      validation.style.display='block';\n      valuteValueInput.style= \"border-color:var(--validation-color)\";\n    }\n\n  }\n\n  render(){\n    return (\n      <div className=\"App_body\">\n        <img src='./Logo-DL.png' alt=\"Logo\" className=\"Img__Logo\"/>\n      <TransactionList delAllTrans={this.delAllTrans} delOneTrans={this.delOneTrans} actualyValute={this.state.valute} listTrans={this.state.listTrans} />\n      <Valute changeValute={this.changeValute} actualyValute={this.state.valute} defValute={this.state.defValute}/>\n      <TransactionForm addTrans={this.addTrans.bind(this)}/>\n      <FormRules/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}